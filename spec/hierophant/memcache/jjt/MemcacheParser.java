/* Generated By:JJTree&JavaCC: Do not edit this line. MemcacheParser.java */
package hierophant.memcache.jjt;

import hierophant.memcache.command.Command;
import hierophant.memcache.command.StorageCommand;
import hierophant.memcache.command.SetCommand;
import hierophant.memcache.command.AddCommand;
import hierophant.memcache.command.AppendCommand;
import hierophant.memcache.command.PrependCommand;
import hierophant.memcache.command.ReplaceCommand;
import hierophant.memcache.command.CasCommand;
import hierophant.memcache.command.DeleteCommand;
import hierophant.memcache.command.RetrievalCommand;
import hierophant.memcache.command.VersionCommand;

public class MemcacheParser/*@bgen(jjtree)*/implements MemcacheParserTreeConstants, MemcacheParserConstants {/*@bgen(jjtree)*/
  protected JJTMemcacheParserState jjtree = new JJTMemcacheParserState();public void jjtreeOpenNodeScope(Node node) {
    }
    public void jjtreeCloseNodeScope(Node node) {
    }

  final public Command Command() throws ParseException {
 /*@bgen(jjtree) Command */
  NodeCommand jjtn000 = (NodeCommand)NodeCommand.jjtCreate(this, JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Command command;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETRIEVAL_STATEMENT:
        command = RetrievalCommand();
        break;
      case SET_STATEMENT:
      case ADD_STATEMENT:
      case REPLACE_STATEMENT:
      case APPEND_STATEMENT:
      case PREPEND_STATEMENT:
        command = StorageCommand();
        break;
      case DELETE_STATEMENT:
        command = DeleteCommand();
        break;
      case VERSION_STATEMENT:
        command = VersionCommand();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return command;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public StorageCommand StorageCommand() throws ParseException {
 /*@bgen(jjtree) StorageCommand */
  NodeStorageCommand jjtn000 = (NodeStorageCommand)NodeStorageCommand.jjtCreate(this, JJTSTORAGECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));StorageCommand command;
  String key;
  Long flags = 0L;
  Long time = 0L;
  Long length = 0L;
  Boolean noreply = Boolean.FALSE;
    try {
      command = createStorageCommand();
      key = Key();
      flags = Flags();
      time = Time();
      length = Length();
      noreply = Noreply();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    command.setNode(jjtn000);
    command.setKey(key);
    command.setFlags(flags);
    command.setExpTime(time);
    command.setLength(length);
    command.setNoreply(noreply);
    {if (true) return command;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public StorageCommand createStorageCommand() throws ParseException {
 /*@bgen(jjtree) createStorageCommand */
  NodecreateStorageCommand jjtn000 = (NodecreateStorageCommand)NodecreateStorageCommand.jjtCreate(this, JJTCREATESTORAGECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET_STATEMENT:
        jj_consume_token(SET_STATEMENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return new SetCommand();}
        break;
      case ADD_STATEMENT:
        jj_consume_token(ADD_STATEMENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return new AddCommand();}
        break;
      case REPLACE_STATEMENT:
        jj_consume_token(REPLACE_STATEMENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return new ReplaceCommand();}
        break;
      case APPEND_STATEMENT:
        jj_consume_token(APPEND_STATEMENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return new AppendCommand();}
        break;
      case PREPEND_STATEMENT:
        jj_consume_token(PREPEND_STATEMENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return new PrependCommand();}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public RetrievalCommand RetrievalCommand() throws ParseException {
 /*@bgen(jjtree) RetrievalCommand */
  NodeRetrievalCommand jjtn000 = (NodeRetrievalCommand)NodeRetrievalCommand.jjtCreate(this, JJTRETRIEVALCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));RetrievalCommand command = new RetrievalCommand();
  String key;
    try {
      jj_consume_token(RETRIEVAL_STATEMENT);
      label_1:
      while (true) {
        key = Key();
      command.addKey(key);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KEY:
          ;
          break;
        default:
          break label_1;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    command.setNode(jjtn000);
    {if (true) return command;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public DeleteCommand DeleteCommand() throws ParseException {
 /*@bgen(jjtree) DeleteCommand */
  NodeDeleteCommand jjtn000 = (NodeDeleteCommand)NodeDeleteCommand.jjtCreate(this, JJTDELETECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));DeleteCommand command = new DeleteCommand();
  String key;
  Long time = 0L;
  Boolean noreply = Boolean.FALSE;
    try {
      jj_consume_token(DELETE_STATEMENT);
      key = Key();
      time = Time();
      noreply = Noreply();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    command.setNode(jjtn000);
    command.setKey(key);
    command.setExpTime(time);
    command.setNoreply(noreply);
    {if (true) return command;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public VersionCommand VersionCommand() throws ParseException {
 /*@bgen(jjtree) VersionCommand */
  NodeVersionCommand jjtn000 = (NodeVersionCommand)NodeVersionCommand.jjtCreate(this, JJTVERSIONCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VERSION_STATEMENT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    VersionCommand command = new VersionCommand();
    command.setNode(jjtn000);
    {if (true) return command;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Key() throws ParseException {
 /*@bgen(jjtree) Key */
  NodeKey jjtn000 = (NodeKey)NodeKey.jjtCreate(this, JJTKEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token key;
    try {
      key = jj_consume_token(KEY);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return key.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Long Flags() throws ParseException {
 /*@bgen(jjtree) Flags */
  NodeFlags jjtn000 = (NodeFlags)NodeFlags.jjtCreate(this, JJTFLAGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token flags;
    try {
      flags = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return Long.valueOf(flags.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Long Time() throws ParseException {
 /*@bgen(jjtree) Time */
  NodeTime jjtn000 = (NodeTime)NodeTime.jjtCreate(this, JJTTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token time;
    try {
      time = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return Long.valueOf(time.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Long Length() throws ParseException {
 /*@bgen(jjtree) Length */
  NodeLength jjtn000 = (NodeLength)NodeLength.jjtCreate(this, JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token length;
    try {
      length = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return Long.valueOf(length.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Boolean Noreply() throws ParseException {
 /*@bgen(jjtree) Noreply */
  NodeNoreply jjtn000 = (NodeNoreply)NodeNoreply.jjtCreate(this, JJTNOREPLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Boolean noreply = Boolean.FALSE;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOREPLY:
        jj_consume_token(NOREPLY);
               noreply = Boolean.TRUE;
        break;
      default:
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return noreply;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MemcacheParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public MemcacheParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MemcacheParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MemcacheParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public MemcacheParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MemcacheParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public MemcacheParser(MemcacheParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(MemcacheParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
