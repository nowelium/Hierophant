// オプション定義
options {
    JDK_VERSION = "1.5";
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = false;
    //* <boolean: true> メソッドをすべてstaticにする
    STATIC = false;
    //* <boolean: false>ノードごとにクラスを生成する
    MULTI = true;
    //* <boolean: false> Visitorパターンを利用する
    VISITOR = true;
    //* <String> LOOKAHEADの規定値
    // LOOKAHEAD
    //
    USER_CHAR_STREAM = false;
    //
    USER_TOKEN_MANAGER = false;
    //* <boolean> 生成したパーサーがUNICODEでの入力を受け付けるようにする
    UNICODE_INPUT = true;
    //
    JAVA_UNICODE_ESCAPE = false;
    //* <boolean: true> SimpleNode及び文法中で使用されるその他のノードのサンプル実装を生成します
    // BUILD_NODE_FILES
    //* <boolean: false> 大文字小文字の区別をしない
    IGNORE_CASE = false;
    //* <String> ノードの基底クラス
    NODE_EXTENDS = "hierophant.memcache.command.Command";
    //* <boolean: false> 各ノードスコープの入口と出口にユーザ定義パーサメソッドの呼出しを挿入します
    NODE_SCOPE_HOOK = true;
    //* <boolean: false> ノードを生成する際、次のシグネチャのファクトリメソッドを使用します
    NODE_FACTORY = true;
    //* <boolean: false> パーサオプジェクトを渡す、ノード生成ルーチンの別形式を使います
    NODE_USES_PARSER = true;
    //* <String: ""> 生成したノードクラスを格納するパッケージ。デフォルトはパーサのパッケージ
    //NODE_PACKAGE = "hierophant.memcache.jjt.node";
    //* <String: "AST"> multiモードでノード識別子からノードクラス名を生成するのに使われるプレフィックス
    NODE_PREFIX = "Node";
    //* <boolean: false> 特に指定のない場合、ノードを生成しないようにする
    // NODE_DEFAULT_VOID　= false;
    //
    BUILD_PARSER = true;
    //
    BUILD_TOKEN_MANAGER = true;
    //
    SANITY_CHECK = true;
    //
    FORCE_LA_CHECK = true;
    //
    // CHOICE_AMBIGUITY_CHECK = true;
    //
    // OTHER_AMBIGUITY_CHECK = true;
    //* <boolean: false> Token発見時に void CommonTokenAction(Token token) が呼び出される
    COMMON_TOKEN_ACTION = true;
    //* <boolean: false> jjtGetFirstToken(), jjtSetFirstToken(), getLastToken(), and jjtSetLastToken() をSimpleNodeに追加する
    TRACK_TOKENS = true;
    //* <String: "Object"> Visitorの引数で使用される型 
    VISITOR_DATA_TYPE = "hierophant.memcache.Parameter";
    //* <String: "Object"> Visitorの戻り型
    VISITOR_RETURN_TYPE = "hierophant.memcache.Return";
    //* <String: ""> JJTreeの出力先ディレクトリ。
    //JJTREE_OUTPUT_DIRECTORY = "hierophant/memcache/jjt";
}

// パーサークラスの定義
PARSER_BEGIN(MemcacheParser)
package hierophant.memcache.jjt;

import hierophant.memcache.command.Command;
import hierophant.memcache.command.StorageCommand;
import hierophant.memcache.command.SetCommand;
import hierophant.memcache.command.AddCommand;
import hierophant.memcache.command.AppendCommand;
import hierophant.memcache.command.PrependCommand;
import hierophant.memcache.command.ReplaceCommand;
import hierophant.memcache.command.CasCommand;
import hierophant.memcache.command.DeleteCommand;
import hierophant.memcache.command.RetrievalCommand;
import hierophant.memcache.command.VersionCommand;

public class MemcacheParser {
    public void jjtreeOpenNodeScope(Node node) {
    }
    public void jjtreeCloseNodeScope(Node node) {
    }
}
PARSER_END(MemcacheParser)

TOKEN_MGR_DECLS: {
    void CommonTokenAction(Token t) {
    }
}

/*
 * SKIP:　マッチした文字列は捨てられる。
 * MORE:　マッチ操作は継続される。ここでマッチした文字列と以後マッチしたものを結合したものがトークンになる。
 * TOKEN:　マッチした文字列でトークンを形成して返す。
 * SPECIAL_TOKEN:　スペシャルトークンを作るが、それは返さない。その次にマッチしたトークンのspecialTokenフィールドで見ることが出来る。
 */
SKIP: {
    " " | "\t" | "\r" | "\n"
}
TOKEN: {
    < NUMBER: ["1"-"9"] (["0"-"9"])* | "0" >
  | < FLAGS: < NUMBER > >
  | < TIME: < NUMBER >  >
  | < LENGTH: < NUMBER > >
  | < CREMENT_VALUE: < NUMBER > >
  | < CAS_UNIQUE: < NUMBER > >
}
TOKEN: {
  < SET_STATEMENT: "set" >
  | < ADD_STATEMENT: "add" >
  | < REPLACE_STATEMENT: "replace" >
  | < APPEND_STATEMENT: "append" >
  | < PREPEND_STATEMENT: "prepend" >
  | < CAS_STATEMENT: "cas" >
  | < STORAGE_STATEMENT:
        < SET_STATEMENT >
        | < ADD_STATEMENT >
        | < REPLACE_STATEMENT >
        | < APPEND_STATEMENT >
        | < PREPEND_STATEMENT >
    >
  | < STORAGE_COMMAND:
        (          < STORAGE_STATEMENT > < KEY > < FLAGS > < TIME > < LENGTH >
          | < CAS_STATEMENT > < KEY > < FLAGS > < TIME > < LENGTH > < CAS_UNIQUE >
        )
        (< NOREPLY >)?
    >
}
TOKEN: {
  < RETRIEVAL_STATEMENT: "get" | "gets" >
  | < RETRIEVAL_COMMAND:
        < RETRIEVAL_STATEMENT > < KEY >
    >
}
TOKEN: {
  < DELETE_STATEMENT: "delete" >
  | < DELETE_COMMAND:
        < DELETE_STATEMENT > < KEY > (< TIME >)? (< NOREPLY >)?
    >}
TOKEN: {
  < INCREMENT_STATEMENT: "incr" >
  | < INCREMENT_COMMAND:
        < INCREMENT_STATEMENT > < KEY > < CREMENT_VALUE > (< NOREPLY >)?
    >
}
TOKEN: {
  < DECREMENT_STATEMENT: "decr" >
  | < DECREMENT_COMMAND:
        < DECREMENT_STATEMENT > < KEY > < CREMENT_VALUE > (< NOREPLY >)?
    >}
TOKEN: {
  < STATISTICS_STATEMENT: "STAT" >
  | < STATISTICS_OPTION: "items" | "slabs" | "sizes" >
  | < STATISTICS_COMMAND:
        < STATISTICS_STATEMENT > (< STATISTICS_OPTION >)?
    >
}
TOKEN: {
  < FLUSH_STATEMENT: "flush_all" >
  | < FLUSH_COMMAND:
        < FLUSH_STATEMENT > (< TIME >)? (< NOREPLY >)?
    >}
TOKEN: {
  < VERSION_STATEMENT: "version" >
  | < VERSION_COMMAND:
        < VERSION_STATEMENT >
    >}
TOKEN: {
    < NOREPLY: "noreply" >
}
// last match
TOKEN: {
    < KEY: (~[" ", "\r","\n"])+ >
}

Command Command():
{
  Command command;}
{  (
    command = RetrievalCommand()
  | command = StorageCommand()
  | command = DeleteCommand()
  | command = VersionCommand()  )
  {
    return command;
  }
}
StorageCommand StorageCommand():
{
  StorageCommand command;
  String key;
  Long flags = 0L;
  Long time = 0L;
  Long length = 0L;
  Boolean noreply = Boolean.FALSE;}
{
  command = createStorageCommand()
  key = Key()
  flags = Flags()
  time = Time()
  length = Length()
  noreply = Noreply()
  {
    command.setNode(jjtThis);    command.setKey(key);
    command.setFlags(flags);
    command.setExpTime(time);
    command.setLength(length);
    command.setNoreply(noreply);
    return command;
  }
}
StorageCommand createStorageCommand():
{}
{
  (    < SET_STATEMENT >    {
      return new SetCommand();    }
    | < ADD_STATEMENT >    {
      return new AddCommand();    }
    | < REPLACE_STATEMENT >
    {      return new ReplaceCommand();
    }
    | < APPEND_STATEMENT >
    {
      return new AppendCommand();    }
    | < PREPEND_STATEMENT >
    {
      return new PrependCommand();    }
  )
}

RetrievalCommand RetrievalCommand():
{
  RetrievalCommand command = new RetrievalCommand();
  String key;
}
{  < RETRIEVAL_STATEMENT >
  (
    key = Key()    {
      command.addKey(key);
    }  )+
  {
    command.setNode(jjtThis);
    return command;  }
}
DeleteCommand DeleteCommand():
{
  DeleteCommand command = new DeleteCommand();
  String key;
  Long time = 0L;
  Boolean noreply = Boolean.FALSE;}
{  < DELETE_STATEMENT >
  key = Key()
  time = Time()
  noreply = Noreply()
  {
    command.setNode(jjtThis);    command.setKey(key);
    command.setExpTime(time);
    command.setNoreply(noreply);
    return command;
  }
}
VersionCommand VersionCommand():
{}
{
  < VERSION_STATEMENT >
  {
    VersionCommand command = new VersionCommand();
    command.setNode(jjtThis);
    return command;  }}

String Key():
{ Token key; }{
  key = < KEY >
  {
    return key.image;  }}

Long Flags():
{ Token flags; }
{  flags = < NUMBER >
  {    return Long.valueOf(flags.image);
  }
}

Long Time():
{ Token time; }{  time = < NUMBER >
  {    return Long.valueOf(time.image);
  }
}

Long Length():
{ Token length; }
{  length = < NUMBER >
  {    return Long.valueOf(length.image);
  }
}

Boolean Noreply():
{ Boolean noreply = Boolean.FALSE; }{
  [< NOREPLY >{noreply = Boolean.TRUE;}]
  {    return noreply;
  }}