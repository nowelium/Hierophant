/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. memcache.jj */
/*@egen*/// \u30aa\u30d7\u30b7\u30e7\u30f3\u5b9a\u7fa9
options {
    JDK_VERSION = "1.5";
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = false;
    //* <boolean: true> \u30e1\u30bd\u30c3\u30c9\u3092\u3059\u3079\u3066static\u306b\u3059\u308b
    STATIC = false;
                                      
                 
                                         
                   
    //* <String> LOOKAHEAD\u306e\u898f\u5b9a\u5024
    // LOOKAHEAD
    //
    USER_CHAR_STREAM = false;
    //
    USER_TOKEN_MANAGER = false;
    //* <boolean> \u751f\u6210\u3057\u305f\u30d1\u30fc\u30b5\u30fc\u304cUNICODE\u3067\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3088\u3046\u306b\u3059\u308b
    UNICODE_INPUT = true;
    //
    JAVA_UNICODE_ESCAPE = false;
    //* <boolean: true> SimpleNode\u53ca\u3073\u6587\u6cd5\u4e2d\u3067\u4f7f\u7528\u3055\u308c\u308b\u305d\u306e\u4ed6\u306e\u30ce\u30fc\u30c9\u306e\u30b5\u30f3\u30d7\u30eb\u5b9f\u88c5\u3092\u751f\u6210\u3057\u307e\u3059
    // BUILD_NODE_FILES
    //* <boolean: false> \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u533a\u5225\u3092\u3057\u306a\u3044
    IGNORE_CASE = false;
                          
                                                         
                                                              
                           
                                                          
                        
                                                        
                            
                                                         
                                                    
                                                                  
                         
    //* <boolean: false> \u7279\u306b\u6307\u5b9a\u306e\u306a\u3044\u5834\u5408\u3001\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b
    // NODE_DEFAULT_VOID\u3000= false;
    //
    BUILD_PARSER = true;
    //
    BUILD_TOKEN_MANAGER = true;
    //
    SANITY_CHECK = true;
    //
    FORCE_LA_CHECK = true;
    //
    // CHOICE_AMBIGUITY_CHECK = true;
    //
    // OTHER_AMBIGUITY_CHECK = true;
    //* <boolean: false> Token\u767a\u898b\u6642\u306b void CommonTokenAction(Token token) \u304c\u547c\u3073\u51fa\u3055\u308c\u308b
    COMMON_TOKEN_ACTION = true;
                                                                                                                       
                        
                                             
                                                        
                                      
                                                       
    //* <String: ""> JJTree\u306e\u51fa\u529b\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002
    //JJTREE_OUTPUT_DIRECTORY = "hierophant/memcache/jjt";
}

// \u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9
PARSER_BEGIN(MemcacheParser)
package hierophant.memcache.jjt;

import hierophant.memcache.command.Command;
import hierophant.memcache.command.StorageCommand;
import hierophant.memcache.command.SetCommand;
import hierophant.memcache.command.AddCommand;
import hierophant.memcache.command.AppendCommand;
import hierophant.memcache.command.PrependCommand;
import hierophant.memcache.command.ReplaceCommand;
import hierophant.memcache.command.CasCommand;
import hierophant.memcache.command.DeleteCommand;
import hierophant.memcache.command.RetrievalCommand;
import hierophant.memcache.command.VersionCommand;

public class MemcacheParser/*@bgen(jjtree)*/implements MemcacheParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTMemcacheParserState jjtree = new JJTMemcacheParserState();

/*@egen*/
    public void jjtreeOpenNodeScope(Node node) {
    }
    public void jjtreeCloseNodeScope(Node node) {
    }
}
PARSER_END(MemcacheParser)

TOKEN_MGR_DECLS: {
    void CommonTokenAction(Token t) {
    }
}

/*
 * SKIP:\u3000\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u306f\u6368\u3066\u3089\u308c\u308b\u3002
 * MORE:\u3000\u30de\u30c3\u30c1\u64cd\u4f5c\u306f\u7d99\u7d9a\u3055\u308c\u308b\u3002\u3053\u3053\u3067\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u3068\u4ee5\u5f8c\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u304c\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308b\u3002
 * TOKEN:\u3000\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u3067\u30c8\u30fc\u30af\u30f3\u3092\u5f62\u6210\u3057\u3066\u8fd4\u3059\u3002
 * SPECIAL_TOKEN:\u3000\u30b9\u30da\u30b7\u30e3\u30eb\u30c8\u30fc\u30af\u30f3\u3092\u4f5c\u308b\u304c\u3001\u305d\u308c\u306f\u8fd4\u3055\u306a\u3044\u3002\u305d\u306e\u6b21\u306b\u30de\u30c3\u30c1\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306especialToken\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002
 */
SKIP: {
    " " | "\t" | "\r" | "\n"
}
TOKEN: {
    < NUMBER: ["1"-"9"] (["0"-"9"])* | "0" >
  | < FLAGS: < NUMBER > >
  | < TIME: < NUMBER >  >
  | < LENGTH: < NUMBER > >
  | < CREMENT_VALUE: < NUMBER > >
  | < CAS_UNIQUE: < NUMBER > >
}
TOKEN: {
  < SET_STATEMENT: "set" >
  | < ADD_STATEMENT: "add" >
  | < REPLACE_STATEMENT: "replace" >
  | < APPEND_STATEMENT: "append" >
  | < PREPEND_STATEMENT: "prepend" >
  | < CAS_STATEMENT: "cas" >
  | < STORAGE_STATEMENT:
        < SET_STATEMENT >
        | < ADD_STATEMENT >
        | < REPLACE_STATEMENT >
        | < APPEND_STATEMENT >
        | < PREPEND_STATEMENT >
    >
  | < STORAGE_COMMAND:
        (          < STORAGE_STATEMENT > < KEY > < FLAGS > < TIME > < LENGTH >
          | < CAS_STATEMENT > < KEY > < FLAGS > < TIME > < LENGTH > < CAS_UNIQUE >
        )
        (< NOREPLY >)?
    >
}
TOKEN: {
  < RETRIEVAL_STATEMENT: "get" | "gets" >
  | < RETRIEVAL_COMMAND:
        < RETRIEVAL_STATEMENT > < KEY >
    >
}
TOKEN: {
  < DELETE_STATEMENT: "delete" >
  | < DELETE_COMMAND:
        < DELETE_STATEMENT > < KEY > (< TIME >)? (< NOREPLY >)?
    >}
TOKEN: {
  < INCREMENT_STATEMENT: "incr" >
  | < INCREMENT_COMMAND:
        < INCREMENT_STATEMENT > < KEY > < CREMENT_VALUE > (< NOREPLY >)?
    >
}
TOKEN: {
  < DECREMENT_STATEMENT: "decr" >
  | < DECREMENT_COMMAND:
        < DECREMENT_STATEMENT > < KEY > < CREMENT_VALUE > (< NOREPLY >)?
    >}
TOKEN: {
  < STATISTICS_STATEMENT: "STAT" >
  | < STATISTICS_OPTION: "items" | "slabs" | "sizes" >
  | < STATISTICS_COMMAND:
        < STATISTICS_STATEMENT > (< STATISTICS_OPTION >)?
    >
}
TOKEN: {
  < FLUSH_STATEMENT: "flush_all" >
  | < FLUSH_COMMAND:
        < FLUSH_STATEMENT > (< TIME >)? (< NOREPLY >)?
    >}
TOKEN: {
  < VERSION_STATEMENT: "version" >
  | < VERSION_COMMAND:
        < VERSION_STATEMENT >
    >}
TOKEN: {
    < NOREPLY: "noreply" >
}
// last match
TOKEN: {
    < KEY: (~[" ", "\r","\n"])+ >
}

Command Command():
{/*@bgen(jjtree) Command */
  NodeCommand jjtn000 = (NodeCommand)NodeCommand.jjtCreate(this, JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Command command;}
{/*@bgen(jjtree) Command */
  try {
/*@egen*/  (
    command = RetrievalCommand()
  | command = StorageCommand()
  | command = DeleteCommand()
  | command = VersionCommand()  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return command;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
StorageCommand StorageCommand():
{/*@bgen(jjtree) StorageCommand */
  NodeStorageCommand jjtn000 = (NodeStorageCommand)NodeStorageCommand.jjtCreate(this, JJTSTORAGECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  StorageCommand command;
  String key;
  Long flags = 0L;
  Long time = 0L;
  Long length = 0L;
  Boolean noreply = Boolean.FALSE;}
{/*@bgen(jjtree) StorageCommand */
  try {
/*@egen*/
  command = createStorageCommand()
  key = Key()
  flags = Flags()
  time = Time()
  length = Length()
  noreply = Noreply()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    command.setNode(jjtn000);    command.setKey(key);
    command.setFlags(flags);
    command.setExpTime(time);
    command.setLength(length);
    command.setNoreply(noreply);
    return command;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
StorageCommand createStorageCommand():
{/*@bgen(jjtree) createStorageCommand */
  NodecreateStorageCommand jjtn000 = (NodecreateStorageCommand)NodecreateStorageCommand.jjtCreate(this, JJTCREATESTORAGECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) createStorageCommand */
  try {
/*@egen*/
  (    < SET_STATEMENT >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/    {
      return new SetCommand();    }
    | < ADD_STATEMENT >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/    {
      return new AddCommand();    }
    | < REPLACE_STATEMENT >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {      return new ReplaceCommand();
    }
    | < APPEND_STATEMENT >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      return new AppendCommand();    }
    | < PREPEND_STATEMENT >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      return new PrependCommand();    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

RetrievalCommand RetrievalCommand():
{/*@bgen(jjtree) RetrievalCommand */
  NodeRetrievalCommand jjtn000 = (NodeRetrievalCommand)NodeRetrievalCommand.jjtCreate(this, JJTRETRIEVALCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  RetrievalCommand command = new RetrievalCommand();
  String key;
}
{/*@bgen(jjtree) RetrievalCommand */
  try {
/*@egen*/  < RETRIEVAL_STATEMENT >
  (
    key = Key()    {
      command.addKey(key);
    }  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    command.setNode(jjtn000);
    return command;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
DeleteCommand DeleteCommand():
{/*@bgen(jjtree) DeleteCommand */
  NodeDeleteCommand jjtn000 = (NodeDeleteCommand)NodeDeleteCommand.jjtCreate(this, JJTDELETECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  DeleteCommand command = new DeleteCommand();
  String key;
  Long time = 0L;
  Boolean noreply = Boolean.FALSE;}
{/*@bgen(jjtree) DeleteCommand */
  try {
/*@egen*/  < DELETE_STATEMENT >
  key = Key()
  time = Time()
  noreply = Noreply()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    command.setNode(jjtn000);    command.setKey(key);
    command.setExpTime(time);
    command.setNoreply(noreply);
    return command;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
VersionCommand VersionCommand():
{/*@bgen(jjtree) VersionCommand */
  NodeVersionCommand jjtn000 = (NodeVersionCommand)NodeVersionCommand.jjtCreate(this, JJTVERSIONCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VersionCommand */
  try {
/*@egen*/
  < VERSION_STATEMENT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    VersionCommand command = new VersionCommand();
    command.setNode(jjtn000);
    return command;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}

String Key():
{/*@bgen(jjtree) Key */
  NodeKey jjtn000 = (NodeKey)NodeKey.jjtCreate(this, JJTKEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token key; }{/*@bgen(jjtree) Key */
  try {
/*@egen*/
  key = < KEY >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return key.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}

Long Flags():
{/*@bgen(jjtree) Flags */
  NodeFlags jjtn000 = (NodeFlags)NodeFlags.jjtCreate(this, JJTFLAGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token flags; }
{/*@bgen(jjtree) Flags */
  try {
/*@egen*/  flags = < NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {    return Long.valueOf(flags.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Long Time():
{/*@bgen(jjtree) Time */
  NodeTime jjtn000 = (NodeTime)NodeTime.jjtCreate(this, JJTTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token time; }{/*@bgen(jjtree) Time */
  try {
/*@egen*/  time = < NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {    return Long.valueOf(time.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Long Length():
{/*@bgen(jjtree) Length */
  NodeLength jjtn000 = (NodeLength)NodeLength.jjtCreate(this, JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token length; }
{/*@bgen(jjtree) Length */
  try {
/*@egen*/  length = < NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {    return Long.valueOf(length.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Boolean Noreply():
{/*@bgen(jjtree) Noreply */
  NodeNoreply jjtn000 = (NodeNoreply)NodeNoreply.jjtCreate(this, JJTNOREPLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Boolean noreply = Boolean.FALSE; }{/*@bgen(jjtree) Noreply */
  try {
/*@egen*/
  [< NOREPLY >{noreply = Boolean.TRUE;}]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {    return noreply;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/}